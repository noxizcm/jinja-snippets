{
	// basic elemtns
	"jinja Statements": {
		"prefix": "j.stat",
		"body": [
			"{% ${1:statement} %}",
				"\t$2",
			"{% end${1:statement} %}$0",
		],
		"description": "statements {% ... %}"
	},
	"jinja Expressions": {
		"prefix": ["j.exp, j.print"],
		"body": [
			"{{ $1 }}$0"
		],
		"description": "expressions {{ ... }}"
	},
	"jinja Comments": {
		"prefix": "j.comm",
		"body": [
			"{# ${1:comments} #}$0",
		],
		"description": "comments {# ... #}"
	},
	"jinja block": {
		"prefix": "j.block",
		"body": [
			"{% block ${1:name} %}",
				"\t$2",
			"{% endblock %}$0"
		],
		"description": "define blocks for templates"
	},

	// if statements
	"jinja if": {
		"prefix": "j.if",
		"body": [
			"{% if ${1:condition} %}",
				"\t$2",
			"{% endif %}$0"
		],
		"description": "if statement"
	},
	"jinja if-else": {
		"prefix": "j.if-else",
		"body": [
			"{% if ${1:condition} %}",
				"\t$2",
			"{% else %}",
				"\t$3",
			"{% endif %}$0"
		],
		"description": "if and else statement"
	},
	"jinja if-elif-else": {
		"prefix": "j.if-elif-else",
		"body": [
			"{% if ${1:condition} %}",
				"\t$2",
			"{% elif ${3:condition2} %}",
				"\t$4",
			"{% else %}",
				"\t$5",
			"{% endif %}$0"
		],
		"description": "if, elif and else statement"
	},
	"jinja if-for": {
		"prefix": "j.if-for",
		"body": [
			"{% if ${1:iterable} %}",
				"\t{% for ${2:item} in ${1:iterable} %}",
					"\t\t$3",
				"\t{% endfor %}",
			"{% endif %}$0"
		],
		"description": "for loop in a if statement"
	},

	// for statements
	"jinja for": {
		"prefix": "j.for",
		"body": [
			"{% for ${1:item} in ${2:iterable} %}",
				"\t$3",
			"{% endfor %}$0"
		],
		"description": "for statements"
	},
	"jinja for-if": {
		"prefix": "j.for-if",
		"body": [
			"{% for ${1:item} in ${2:iterable} %}",
				"\t{% if ${1:item} %}",
					"\t\t$3",
				"\t{% endif %}",
			"{% endfor %}$0"
		],
		"description": "if statement in a for loop"
	},
	"jinja for-else": {
		"prefix": "j.for-else",
		"body": [
			"{% for ${1:item} in ${2:iterable} %}",
				"\t$3",
			"{% else %}",
				"\t$4",
			"{% endfor %}$0"
		],
		"description": "else break statement in a for loop"
	},

	// with Statement
	"jinja with": {
		"prefix": "j.with",
		"body": [
			"{% with ${1:item}  %}",
				"\t$2",
			"{% endwith %}$0"
		],
		"description": "with statements"
	},

	// macros
	"jinja macro": {
		"prefix": "j.macro",
		"body": [
			"{% macro ${1:name}(${2:args}) %}",
				"\t$3",
			"{% endmacro %}$0"
		],
		"description": "define macro | function"
	},

	// call
	"jinja call": {
		"prefix": "j.call",
		"body": [
			"{% call ${1:macroname}(${2:args}) %}",
				"\t$3",
			"{% endcall %}$0"
		],
		"description": "call functionality for macro | function"
	},

	// filters
	"jinja filter": {
		"prefix": "j.filter",
		"body": [
			"{% filter ${1:filtername} %}",
				"\t$2",
			"{% endfilter %}$0"
		],
		"description": "apply regular jinja filters"
	},

	// includes
	"jinja include": {
		"prefix": "j.incl",
		"body": [
			"{% include '${1:filename}' ${2| ,ignore missing,with context,ignore missing with context|} %}$0"
		],
		"description": "include a template into the current namespace. Tabstops Choice: ignore missing, with context, ignore missing with context"
	},

	// extends
	"jinja extends": {
		"prefix": "j.extends",
		"body": [
			"{% extends '${1:filename}' %}$0"
		],
		"description": "template inheritance"
	},

	// imports
	"jinja import": {
		"prefix": "j.imp",
		"body": [
			"{% import '${1:filename}' ${2| , with context|} %}$0"
		],
		"description": "import module into current namespace. Tabstops Choice: with context"
	},
	"jinja from import": {
		"prefix": "j.imp-from",
		"body": [
			"{% from '${1:template}' import '${2:module}' ${3| , with context|} %}$0"
		],
		"description": "import specific names from a template into the current namespace. Tabstops Choice: with context"
	},

	// assignments
	"jinja set": {
		"prefix": "j.set",
		"body": [
			"{% set ${1:variable} = ${2:value} %}$0"
		],
		"description": "assign value to variable"
	},
	"jinja set multiple": {
		"prefix": "j.setmulti",
		"body": [
			"{% set ${1:key}, ${2:value} = ${3:callable()} %}$0"
		],
		"description": "assign key, value returned by a callable"
	},
	"jinja set block": {
		"prefix": "j.setblock",
		"body": [
			"{% set ${1:variable} %}",
				"\t${2:contents}",
			"{% endset %}$0",
		],
		"description": "block assignments: capture the contents of block into variable"
	},

	// lorem ipsum
	"jinja lipsum": {
		"prefix": ["j.lipsum", "j.lorem"],
		"body": [
			"{{ lipsum(n=${1:5}, html=${2:True}, min=${3:20}, max=${4:100}) }}$0",
		],
		"description": "generate some lorem ipsum."
	},

	// randomize
	"jinja random": {
		"prefix": "j.random",
		"body": [
			"{{ range(${1:0}, ${2:10000}, ${3:1}) | random }}$0"
		],
		"description": "generate random item from a range"
	},

	// url
	"jinja url": {
		"prefix": "j.url",
		"body": [
			"{{ url_for('${1:endpoint}' $2) }}$0"
		],
		"description": "generate url for endpoint"
	},
}
